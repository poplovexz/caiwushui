// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN     // 系统管理员
  MANAGER   // 企业管理员
  USER      // 普通用户
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  roleId        String?   // 关联角色ID
  assignedRole  Role?     @relation(fields: [roleId], references: [id])
  status        String    @default("ACTIVE") // ACTIVE, INACTIVE, LOCKED
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  importRecords UserImportRecord[] // 关联批量导入记录
  operations    OperationLog[]      // 关联操作日志
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Enterprise {
  id                String      @id @default(cuid())
  name              String
  unifiedSocialCode String      @unique
  legalPerson       String
  registeredCapital Float
  foundingDate      DateTime
  businessScope     String
  address           String
  contactNumber     String
  email            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  deletedAt        DateTime?
  taxRecords       TaxRecord[]
  socialRecords    SocialRecord[]
  versionRecords   VersionRecord[]
  taxPaymentFiles  TaxPaymentFile[]
  financeRecords   FinanceRecord[]
  financialReports FinancialReport[]
  taxRefunds       TaxRefund[]
}

model TaxRecord {
  id            String     @id @default(cuid())
  enterpriseId  String
  enterprise    Enterprise @relation(fields: [enterpriseId], references: [id])
  year          Int
  month         Int
  taxableIncome Float
  taxAmount     Float
  paidAmount    Float
  taxType       String
  paymentStatus String
  dueDate       String
  paymentDate   String?
  remarks       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?
  taxNumber     String     // 添加税号字段
  taxRefund     TaxRefund? @relation(fields: [taxRefundId], references: [id])
  taxRefundId   String?

  @@index([enterpriseId])
  @@index([year, month])
  @@index([taxType])
  @@index([paymentStatus])
  @@index([taxRefundId])
}

model SocialRecord {
  id            String      @id @default(cuid())
  enterpriseId  String
  enterprise    Enterprise  @relation(fields: [enterpriseId], references: [id])
  employeeName  String
  idNumber      String
  insuranceType String
  baseAmount    Float
  personalAmount Float
  companyAmount Float
  totalAmount   Float
  paymentStatus String
  paymentDate   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
}

model VersionRecord {
  id            String      @id @default(cuid())
  enterpriseId  String
  enterprise    Enterprise  @relation(fields: [enterpriseId], references: [id])
  fileName      String
  fileType      String      // 文件类型，如 pdf, doc 等
  fileSize      Int         // 文件大小，单位字节
  fileUrl       String      // 文件存储路径
  version       String      // 版本号
  status        String      // 状态：待审核、已通过、已驳回
  uploadTime    DateTime    @default(now())
  reviewTime    DateTime?   // 审核时间
  reviewResult  String?     // 审核结果
  reviewComment String?     // 审核意见
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  @@index([enterpriseId])
  @@index([status])
  @@index([uploadTime])
}

model TaxPaymentFile {
  id              String    @id @default(cuid())
  fileName        String    // 文件名称
  fileType        String    // 文件类型
  processStatus   String    // 处理状态：待处理、处理中、已处理
  processTime     DateTime? // 处理时间
  serialNumber    String    // NO编号
  enterpriseId    String    // 关联企业ID
  enterprise      Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  taxpayerId      String    // 纳税人识别号
  totalAmount     Float     // 合计金额
  uploadTime      DateTime  @default(now()) // 上传时间
  filePath        String    // 文件存储路径
  remarks         String?   // 备注
  
  @@index([enterpriseId])
  @@index([processStatus])
  @@index([uploadTime])
}

model FinanceRecord {
  id           String    @id @default(cuid())
  fileName     String
  taxNumber    Decimal   @db.Decimal(10, 2)
  year         String
  period       String
  taxpayerId   String
  uploadTime   DateTime
  processStatus String   // 未处理、处理中、已处理
  taxpayerName String
  processType  String    // 人工处理、自动处理
  filePath     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  processTime  DateTime?
  enterpriseId String
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])

  @@index([taxpayerId])
  @@index([processStatus])
  @@index([uploadTime])
  @@index([enterpriseId])
}

model FinancialReport {
  id             String    @id @default(cuid())
  fileName       String    // 文件名称
  reportType     String    // 报表类型：资产负债表、利润表、现金流量表等
  year           String    // 年度
  quarter        String    // 季度：Q1、Q2、Q3、Q4
  period         String    // 所属期间
  totalAssets    Decimal   @db.Decimal(15, 2)  // 总资产
  totalLiability Decimal   @db.Decimal(15, 2)  // 总负债
  netAssets     Decimal   @db.Decimal(15, 2)  // 净资产
  revenue       Decimal   @db.Decimal(15, 2)  // 营业收入
  profit        Decimal   @db.Decimal(15, 2)  // 净利润
  uploadTime    DateTime  // 上传时间
  processStatus String    // 处理状态：未处理、处理中、已处理
  processType   String    // 处理方式：人工处理、自动处理
  filePath      String    // 文件路径
  remarks       String?   // 备注
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  processTime   DateTime? // 处理时间
  enterpriseId  String    // 关联企业ID
  enterprise    Enterprise @relation(fields: [enterpriseId], references: [id])

  @@index([enterpriseId])
  @@index([processStatus])
  @@index([uploadTime])
  @@index([year, quarter])
}

model TaxRefund {
  id             String      @id @default(cuid())
  taxNumber      String
  taxPeriod      String
  taxAmount      Decimal     @db.Decimal(15, 2)
  baseAmount     Decimal     @db.Decimal(15, 2)
  refundRate     Decimal     @db.Decimal(5, 2)
  refundAmount   Decimal     @db.Decimal(15, 2)
  personalAmount Decimal     @db.Decimal(15, 2)
  companyAmount  Decimal     @db.Decimal(15, 2)
  landAmount     Decimal     @db.Decimal(15, 2)
  propertyAmount Decimal     @db.Decimal(15, 2)
  otherAmount    Decimal     @db.Decimal(15, 2)
  totalAmount    Decimal     @db.Decimal(15, 2)
  status         String      // 未处理、处理中、已处理
  enterpriseId   String
  enterprise     Enterprise  @relation(fields: [enterpriseId], references: [id])
  taxRecords     TaxRecord[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([enterpriseId])
  @@index([status])
  @@index([taxPeriod])
}

model TaxRefundConfig {
  id        String   @id @default(cuid())
  name      String   // 企业所得税、个人所得税等
  rate      Decimal  @db.Decimal(5, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([isActive])
}

// 系统版本管理
model SystemVersion {
  id          String   @id @default(cuid())
  version     String   // 版本号
  description String   // 版本描述
  changelog   String   // 变更日志
  isActive    Boolean  @default(false) // 是否为当前激活版本
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 系统设置
model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique // 设置键名
  value       String   // 设置值
  description String?  // 设置描述
  category    String   // 设置分类
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 权限管理
model Permission {
  id          String       @id @default(cuid())
  code        String       @unique // 权限代码
  name        String       // 权限名称
  description String?      // 权限描述
  category    String       // 权限分类
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  roles       RolePermission[]
}

// 角色
model Role {
  id          String       @id @default(cuid())
  code        String       @unique // 角色代码
  name        String       // 角色名称
  description String?      // 角色描述
  isSystem    Boolean      @default(false) // 是否为系统角色
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]       // 关联用户
  permissions RolePermission[]
}

// 角色权限关联
model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

// 用户批量导入记录
model UserImportRecord {
  id          String   @id @default(cuid())
  filename    String   // 导入文件名
  totalCount  Int      // 总记录数
  successCount Int     // 成功导入数
  failCount   Int      // 失败数
  errors      Json?    // 错误记录
  status      String   // 导入状态：PENDING, PROCESSING, COMPLETED, FAILED
  createdBy   String   // 创建人ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [createdBy], references: [id])
}

// 操作日志
model OperationLog {
  id          String   @id @default(cuid())
  userId      String   // 操作用户ID
  action      String   // 操作类型
  module      String   // 操作模块
  description String   // 操作描述
  ipAddress   String?  // IP地址
  userAgent   String?  // 用户代理
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}
